{"mappings":"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","sources":["src/index.js","src/lcov.js","src/comment.js","src/html.js","src/tabulate.js","src/github.js"],"sourcesContent":["import fs, { promises } from \"fs\";\nimport path from \"path\";\nimport core from \"@actions/core\";\nimport github from \"@actions/github\";\nimport { parse } from \"./lcov\";\nimport { diff, diffForMonorepo } from \"./comment\";\nimport { upsertComment } from \"./github\";\n\n/**\n * Find all files inside a dir, recursively.\n * @function getLcovFiles\n * @param  {string} dir Dir path string.\n * @return {string[{<package_name>: <path_to_lcov_file>}]} Array with lcove file names with package names as key.\n */\nconst getLcovFiles = (dir, filelist) => {\n    let fileArray = filelist || [];\n    fs.readdirSync(dir).forEach((file) => {\n        fileArray = fs.statSync(path.join(dir, file)).isDirectory()\n            ? getLcovFiles(path.join(dir, file), fileArray)\n            : fileArray\n                  .filter((f) => f.path.includes(\"lcov.info\"))\n                  .concat({\n                      name: dir.split(\"/\")[1],\n                      path: path.join(dir, file),\n                  });\n    });\n\n    return fileArray;\n};\n\n/**\n * Find all files inside a dir, recursively for base branch.\n * @function getLcovBaseFiles\n * @param  {string} dir Dir path string.\n * @return {string[{<package_name>: <path_to_lcov_file>}]} Array with lcove file names with package names as key.\n */\nconst getLcovBaseFiles = (dir, filelist) => {\n    let fileArray = filelist || [];\n    fs.readdirSync(dir).forEach((file) => {\n        fileArray = fs.statSync(path.join(dir, file)).isDirectory()\n            ? getLcovBaseFiles(path.join(dir, file), fileArray)\n            : fileArray\n                  .filter((f) => f.path.includes(\"lcov-base.info\"))\n                  .concat({\n                      name: dir.split(\"/\")[1],\n                      path: path.join(dir, file),\n                  });\n    });\n\n    return fileArray;\n};\n\nconst main = async () => {\n    const { context = {} } = github || {};\n\n    const token = core.getInput(\"github-token\");\n    const lcovFile = core.getInput(\"lcov-file\") || \"./coverage/lcov.info\";\n    const baseFile = core.getInput(\"lcov-base\");\n    const appName = core.getInput(\"app-name\");\n    // Add base path for monorepo\n    const monorepoBasePath = core.getInput(\"monorepo-base-path\");\n\n    const raw =\n        !monorepoBasePath &&\n        (await promises\n            .readFile(lcovFile, \"utf-8\")\n            .catch((err) => console.error(err)));\n    if (!monorepoBasePath && !raw) {\n        console.log(`No coverage report found at '${lcovFile}', exiting...`);\n\n        return;\n    }\n\n    const baseRaw =\n        baseFile &&\n        (await promises\n            .readFile(baseFile, \"utf-8\")\n            .catch((err) => console.error(err)));\n    if (!monorepoBasePath && baseFile && !baseRaw) {\n        console.log(`No coverage report found at '${baseFile}', ignoring...`);\n    }\n\n    const lcovArray = monorepoBasePath ? getLcovFiles(monorepoBasePath) : [];\n    const lcovBaseArray = monorepoBasePath\n        ? getLcovBaseFiles(monorepoBasePath)\n        : [];\n\n    const lcovArrayForMonorepo = [];\n    const lcovBaseArrayForMonorepo = [];\n    for (const file of lcovArray) {\n        if (file.path.includes(\".info\")) {\n            const rLcove = await promises.readFile(file.path, \"utf8\");\n            const data = await parse(rLcove);\n            lcovArrayForMonorepo.push({\n                packageName: file.name,\n                lcov: data,\n            });\n        }\n    }\n\n    for (const file of lcovBaseArray) {\n        if (file.path.includes(\".info\")) {\n            const rLcovBase = await promises.readFile(file.path, \"utf8\");\n            const data = await parse(rLcovBase);\n            lcovBaseArrayForMonorepo.push({\n                packageName: file.name,\n                lcov: data,\n            });\n        }\n    }\n\n    const options = {\n        repository: context.payload.repository.full_name,\n        commit: context.payload.pull_request.head.sha,\n        prefix: `${process.env.GITHUB_WORKSPACE}/`,\n        head: context.payload.pull_request.head.ref,\n        base: context.payload.pull_request.base.ref,\n        appName,\n    };\n\n    const lcov = !monorepoBasePath && (await parse(raw));\n    const baselcov = baseRaw && (await parse(baseRaw));\n\n    const client = github.getOctokit(token);\n\n    await upsertComment({\n        client,\n        context,\n        prNumber: context.payload.pull_request.number,\n        body: !lcovArrayForMonorepo.length\n            ? diff(lcov, baselcov, options)\n            : diffForMonorepo(\n                  lcovArrayForMonorepo,\n                  lcovBaseArrayForMonorepo,\n                  options,\n              ),\n        hiddenHeader: appName\n            ? `<!-- ${appName}-code-coverage-assistant -->`\n            : `<!-- monorepo-code-coverage-assistant -->`,\n    });\n};\n\nmain().catch((err) => {\n    console.log(err);\n    core.setFailed(err.message);\n});\n","import lcov from \"lcov-parse\";\n\n// Parse lcov string into lcov data\nexport const parse = (data) =>\n    new Promise((resolve, reject) => {\n        lcov(data, (err, res) => {\n            if (err) {\n                reject(err);\n\n                return;\n            }\n            resolve(res);\n        });\n    });\n\n// Get the total coverage percentage from the lcov data.\nexport const percentage = (lcovData) => {\n    let hit = 0;\n    let found = 0;\n    for (const entry of lcovData) {\n        hit += entry.lines.hit;\n        found += entry.lines.found;\n    }\n\n    return (hit / found) * 100;\n};\n","import { details, summary, b, fragment, table, tbody, tr, th } from \"./html\";\nimport { percentage } from \"./lcov\";\nimport { tabulate } from \"./tabulate\";\n\n/**\n * Compares two arrays of objects and returns with unique lines update\n * @param {number} pdiff value from diff percentage\n * @returns {string} emoji string for negative/positive pdiff\n */\nconst renderEmoji = (pdiff) => {\n    if (pdiff.toFixed(2) < 0) return \"❌\";\n\n    return \"✅\";\n};\n\n/**\n * Compares two arrays of objects and returns with unique lines update\n * @param {Array} otherArray\n * @returns {Function} function with filtering non original lines\n */\nconst comparer = (otherArray) => (current) =>\n    otherArray.filter(\n        (other) =>\n            other.lines.found === current.lines.found &&\n            other.lines.hit === current.lines.hit,\n    ).length === 0;\n\n/**\n * Github comment for monorepo\n * @param {Array<{packageName, lcovPath}>} lcovArrayForMonorepo\n * @param {{Array<{packageName, lcovBasePath}>}} lcovBaseArrayForMonorepo\n * @param {*} options\n */\nconst commentForMonorepo = (\n    lcovArrayForMonorepo,\n    lcovBaseArrayForMonorepo,\n    options,\n) => {\n    const { base } = options;\n    const html = lcovArrayForMonorepo.map((lcovObj) => {\n        const baseLcov = lcovBaseArrayForMonorepo.find(\n            (el) => el.packageName === lcovObj.packageName,\n        );\n\n        const pbefore = baseLcov ? percentage(baseLcov.lcov) : 0;\n        const pafter = baseLcov ? percentage(lcovObj.lcov) : 0;\n        const pdiff = pafter - pbefore;\n        const plus = pdiff > 0 ? \"+\" : \"\";\n\n        let arrow = \"\";\n        if (pdiff < 0) {\n            arrow = \"▾\";\n        } else if (pdiff > 0) {\n            arrow = \"▴\";\n        }\n\n        const pdiffHtml = baseLcov\n            ? th(\n                  renderEmoji(pdiff),\n                  \" \",\n                  arrow,\n                  \" \",\n                  plus,\n                  pdiff.toFixed(2),\n                  \"%\",\n              )\n            : \"\";\n        let report = lcovObj.lcov;\n\n        if (baseLcov) {\n            const onlyInLcov = lcovObj.lcov.filter(comparer(baseLcov));\n            const onlyInBefore = baseLcov.filter(comparer(lcovObj.lcov));\n            report = onlyInBefore.concat(onlyInLcov);\n        }\n\n        return `${table(\n            tbody(\n                tr(\n                    th(lcovObj.packageName),\n                    th(percentage(lcovObj.lcov).toFixed(2), \"%\"),\n                    pdiffHtml,\n                ),\n            ),\n        )} \\n\\n ${details(\n            summary(\"Coverage Report\"),\n            tabulate(report, options),\n        )} <br/>`;\n    });\n\n    const title = `Coverage after merging into ${b(base)} <p></p>`;\n\n    return fragment(title, html.join(\"\"));\n};\n\n/**\n * Github comment for single repo\n * @param {raw lcov} lcov\n * @param {*} options\n */\nconst comment = (lcov, before, options) => {\n    const { appName, base } = options;\n    const pbefore = before ? percentage(before) : 0;\n    const pafter = before ? percentage(lcov) : 0;\n    const pdiff = pafter - pbefore;\n    const plus = pdiff > 0 ? \"+\" : \"\";\n\n    let arrow = \"\";\n    if (pdiff < 0) {\n        arrow = \"▾\";\n    } else if (pdiff > 0) {\n        arrow = \"▴\";\n    }\n\n    const pdiffHtml = before\n        ? th(renderEmoji(pdiff), \" \", arrow, \" \", plus, pdiff.toFixed(2), \"%\")\n        : \"\";\n\n    let report = lcov;\n\n    if (before) {\n        const onlyInLcov = lcov.filter(comparer(before));\n        const onlyInBefore = before.filter(comparer(lcov));\n        report = onlyInBefore.concat(onlyInLcov);\n    }\n\n    const title = `Coverage after merging into ${b(base)} <p></p>`;\n    const header = appName\n        ? tbody(\n              tr(th(appName), th(percentage(lcov).toFixed(2), \"%\"), pdiffHtml),\n          )\n        : tbody(tr(th(percentage(lcov).toFixed(2), \"%\"), pdiffHtml));\n\n    return fragment(\n        title,\n        table(header),\n        \"\\n\\n\",\n        details(summary(\"Coverage Report\"), tabulate(report, options)),\n    );\n};\n\n/**\n * Diff in coverage percentage for single repo\n * @param {raw lcov} lcov\n * @param {raw base lcov} before\n * @param {*} options\n */\nexport const diff = (lcov, before, options) => comment(lcov, before, options);\n\n/**\n * Diff in coverage percentage for monorepo\n * @param {Array<{packageName, lcovPath}>} lcovArrayForMonorepo\n * @param {{Array<{packageName, lcovBasePath}>}} lcovBaseArrayForMonorepo\n * @param {*} options\n */\nexport const diffForMonorepo = (\n    lcovArrayForMonorepo,\n    lcovBaseArrayForMonorepo,\n    options,\n) =>\n    commentForMonorepo(lcovArrayForMonorepo, lcovBaseArrayForMonorepo, options);\n","const tag =\n    (name) =>\n    (...children) => {\n        const props =\n            typeof children[0] === \"object\"\n                ? Object.keys(children[0])\n                      .map((key) => ` ${key}='${children[0][key]}'`)\n                      .join(\"\")\n                : \"\";\n\n        const c =\n            typeof children[0] === \"string\" ? children : children.slice(1);\n\n        return `<${name}${props}>${c.join(\"\")}</${name}>`;\n    };\n\nexport const details = tag(\"details\");\nexport const summary = tag(\"summary\");\nexport const tr = tag(\"tr\");\nexport const td = tag(\"td\");\nexport const th = tag(\"th\");\nexport const b = tag(\"b\");\nexport const table = tag(\"table\");\nexport const tbody = tag(\"tbody\");\nexport const a = tag(\"a\");\nexport const span = tag(\"span\");\n\nexport const fragment = (...children) => children.join(\"\");\n","import { th, tr, td, table, tbody, a, b, fragment } from \"./html\";\n\nconst filename = (file, indent, options) => {\n    const relative = file.file.replace(options.prefix, \"\");\n    const href = `https://github.com/${options.repository}/blob/${options.commit}/${relative}`;\n    const parts = relative.split(\"/\");\n    const last = parts[parts.length - 1];\n    const space = indent ? \"&nbsp; &nbsp;\" : \"\";\n\n    return fragment(space, a({ href }, last));\n};\n\nconst percentage = (item) => {\n    if (!item) {\n        return \"N/A\";\n    }\n\n    const value = item.found === 0 ? 100 : (item.hit / item.found) * 100;\n    const rounded = value.toFixed(2).replace(/\\.0*$/u, \"\");\n\n    const tag = value === 100 ? fragment : b;\n\n    return tag(`${rounded}%`);\n};\n\nconst uncovered = (file, options) => {\n    const branches = (file.branches ? file.branches.details : [])\n        .filter((branch) => branch.taken === 0)\n        .map((branch) => branch.line);\n\n    const lines = (file.lines ? file.lines.details : [])\n        .filter((line) => line.hit === 0)\n        .map((line) => line.line);\n\n    const all = [...branches, ...lines].sort();\n\n    return all\n        .map((line) => {\n            const relative = file.file.replace(options.prefix, \"\");\n            const href = `https://github.com/${options.repository}/blob/${options.commit}/${relative}#L${line}`;\n\n            return a({ href }, line);\n        })\n        .join(\", \");\n};\n\nconst toRow = (file, indent, options) =>\n    tr(\n        td(filename(file, indent, options)),\n        td(percentage(file.branches, options)),\n        td(percentage(file.functions, options)),\n        td(percentage(file.lines, options)),\n        td(uncovered(file, options)),\n    );\n\nconst toFolder = (path) => {\n    if (path === \"\") {\n        return \"\";\n    }\n\n    return tr(td({ colspan: 5 }, b(path)));\n};\n\n// Tabulate the lcov data in a HTML table.\nexport const tabulate = (lcov, options) => {\n    const head = tr(\n        th(\"File\"),\n        th(\"Branches\"),\n        th(\"Funcs\"),\n        th(\"Lines\"),\n        th(\"Uncovered Lines\"),\n    );\n\n    const folders = {};\n    for (const file of lcov) {\n        const parts = file.file.replace(options.prefix, \"\").split(\"/\");\n        const folder = parts.slice(0, -1).join(\"/\");\n        folders[folder] = folders[folder] || [];\n        folders[folder].push(file);\n    }\n\n    const rows = Object.keys(folders)\n        .sort()\n        .reduce(\n            (acc, key) => [\n                ...acc,\n                toFolder(key, options),\n                ...folders[key].map((file) => toRow(file, key !== \"\", options)),\n            ],\n            [],\n        );\n\n    return table(tbody(head, ...rows));\n};\n","// Modified from: https://github.com/slavcodev/coverage-monitor-action\n\n// Not needed for now, but could be useful\n// const createStatus = async ({ client, context, sha, status }) =>\n// \tclient.repos.createCommitStatus({\n// \t\t...context.repo,\n// \t\tsha,\n// \t\t...status,\n// \t})\n\n// Every comment written by our action will have this hidden\n// header on top, and will be used to identify which comments\n// to update/delete etc\n\nconst appendHiddenHeaderToComment = (body, hiddenHeader) => hiddenHeader + body;\n\nconst listComments = async ({ client, context, prNumber, hiddenHeader }) => {\n    const { data: existingComments } =\n        (await client.issues?.listComments({\n            ...context.repo,\n            issue_number: prNumber,\n        })) ?? {};\n\n    return existingComments.filter(({ body }) => body.startsWith(hiddenHeader));\n};\n\nconst insertComment = ({ client, context, prNumber, body }, hiddenHeader) =>\n    client.issues.createComment({\n        ...context.repo,\n        issue_number: prNumber,\n        body: appendHiddenHeaderToComment(body, hiddenHeader),\n    });\n\nconst updateComment = ({ client, context, body, commentId }, hiddenHeader) =>\n    client.issues.updateComment({\n        ...context.repo,\n        comment_id: commentId,\n        body: appendHiddenHeaderToComment(body, hiddenHeader),\n    });\n\nconst deleteComments = ({ client, context, comments }) =>\n    Promise.all(\n        comments.map(({ id }) =>\n            client.issues.deleteComment({\n                ...context.repo,\n                comment_id: id,\n            }),\n        ),\n    );\n\nexport const upsertComment = async ({\n    client,\n    context,\n    prNumber,\n    body,\n    hiddenHeader,\n}) => {\n    const existingComments = await listComments({\n        client,\n        context,\n        prNumber,\n        hiddenHeader,\n    });\n    const last = existingComments.pop();\n\n    await deleteComments({\n        client,\n        context,\n        comments: existingComments,\n    });\n\n    return last\n        ? updateComment(\n              {\n                  client,\n                  context,\n                  body,\n                  commentId: last.id,\n              },\n              hiddenHeader,\n          )\n        : insertComment(\n              {\n                  client,\n                  context,\n                  prNumber,\n                  body,\n              },\n              hiddenHeader,\n          );\n};\n"],"names":[],"version":3,"file":"main.js.map"}